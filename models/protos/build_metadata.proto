syntax = "proto3";
package build_metadata;

import "google/protobuf/timestamp.proto";

enum JobTrigger {
    JOB_TRIGGER_UNSPECIFIED = 0;
    POLL = 1;
    WEBHOOK = 2;
    MANUAL = 3;
    SUBSCRIBE_TRIGGER = 4;
    COMMIT_MSG_TRIGGER = 5;
}

enum JobState {
    JOB_STATE_UNSPECIFIED = 0;
    UNKNOWN = 1;
    QUEUED = 2;
    STARTING = 3;
    RUNNING = 4;
    FINISHING = 5;
    CANCELLED = 6;
    KILLED = 7;
    FAILED = 8;
    DONE = 9;
    DELETED = 100;
}

// Server returns a build_summary as response
message BuildStartRequest {
    string remote_uri = 1;
    string branch = 2;
    string commit_ref = 3;
}

// Server returns a build_summary as response
message BuildStopRequest {
    int32 id = 1;
}

// NOTE: we don't know how to resolve if we have identically
// named repos in the same org, but different providers like 
// in both github and bitbucket
message BuildSummaryRequest {
    string org = 1;
    string account = 2;
    string repo = 3;
}

message BuildSummaryResponse {
    repeated BuildSummary summaries = 1;
}

message BuildTarget {
    int32 id = 1;
    string git_hash = 2;
    int32 registered_repo_id = 3;
    int32 build_index = 4;
}

message BuildSummary {
    int32 id = 1;
    BuildTarget build = 2;
    JobTrigger job_trigger = 3;
    google.protobuf.Timestamp queue_time = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    JobState build_state = 7;
}

message BuildStage {
    int32 id = 1;
    int32 build_summary_id = 2;
    string stage = 3;
    bytes output = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    string status = 7;
    int32 exit_code = 8;
}

message BuildLogRequest {
    string org = 1;
    string account = 2;
    string repo = 3;
    int32 index = 4;
}

message BuildLogResponse {
    repeated BuildStage stages = 1;
}

// Server returns build_summary as response
message BuildDeleteRequest {
    string org = 1;
    string account = 2;
    string repo = 3;
    int32 index = 4;
}

service BuildService {
    rpc StartBuild (BuildStartRequest) returns (BuildSummary);
    rpc StopBuild (BuildStopRequest) returns (BuildSummary);
    rpc GetBuildLogs (BuildLogRequest) returns (BuildLogResponse);
    rpc DeleteBuild (BuildDeleteRequest) returns (BuildSummary);
}
